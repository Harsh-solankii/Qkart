{"version":3,"file":"js/757.4e689638.js","mappings":"6OAGA,MAAMA,EAAa,CAAEC,MAAO,6BACtBC,EAAa,CAAED,MAAO,cACtBE,EAAa,CAAEC,IAAK,GACpBC,EAAa,CAAEC,MAAO,CAAC,MAAQ,MAAM,YAAY,SAQvD,OAA4BC,EAAAA,EAAAA,IAAiB,CAC3CC,OAAQ,iBACRC,KAAAA,CAAMC,GCaN,MAAMC,EAASC,EAAAA,GAAW,CACxBC,MAAOD,EAAAA,KAAaC,MAAM,yBAAyBC,SAAS,wBAGxD,aAAEC,EAAY,OAAEC,EAAM,YAAEC,IAAgBC,EAAAA,EAAAA,IAAQ,CACpDC,iBAAkBR,EAClBS,cAAe,CACbP,MAAO,OAIJA,EAAOQ,GAAcJ,EAAY,SAElCK,GAASC,EAAAA,EAAAA,MACTC,GAAYC,EAAAA,EAAAA,IAAI,IAEhBC,EAAWX,GAAaY,UAC5BH,EAAUI,MAAQ,WAChB,IAAIC,QAAiBC,MAAM,6CAA8C,CACvEC,OAAQ,OACRC,QAAS,CAAE,eAAgB,oBAC3BC,KAAMC,KAAKC,UAAUC,KAGnBC,QAAaR,EAASS,OAEF,MAApBD,EAAKE,YACLf,EAAUI,MAAQ,4CAClBN,EAAOkB,KAAK,MAEZhB,EAAUI,MAAQ,oC,IDP5B,MAAO,CAACa,EAAUC,KAChB,MAAMC,GAAyBC,EAAAA,EAAAA,IAAkB,eAEjD,OAAQC,EAAAA,EAAAA,OAAcC,EAAAA,EAAAA,IAAoB,MAAO9C,EAAY,CAC3D0C,EAAO,KAAOA,EAAO,IAAKK,EAAAA,EAAAA,IAAoB,KAAM,KAAM,mBAAoB,KAC9EA,EAAAA,EAAAA,IAAoB,OAAQ,CAC1BrB,SAAUgB,EAAO,KAAOA,EAAO,IAAKM,EAAAA,EAAAA,KAE1C,IAAIC,KAAUC,EAAAA,EAAAA,IAAOxB,KAAawB,EAAAA,EAAAA,IAAOxB,EAAPwB,IAAoBD,IAAQ,CAAC,cACxD,EACDF,EAAAA,EAAAA,IAAoB,MAAO7C,EAAY,CACrCwC,EAAO,KAAOA,EAAO,IAAKK,EAAAA,EAAAA,IAAoB,QAAS,CAAEI,IAAK,SAAW,UAAW,KACpFC,EAAAA,EAAAA,KAAgBL,EAAAA,EAAAA,IAAoB,SAASM,EAAAA,EAAAA,IAAY,CACvDC,KAAM,QACNC,GAAI,QACJ,sBAAuBb,EAAO,KAAOA,EAAO,GAAMc,IAAiBC,EAAAA,EAAAA,IAAO5C,GAAUA,EAAOe,MAAQ4B,EAAS,MAC5GE,YAAa,qBACZR,EAAAA,EAAAA,IAAO7B,IAAc,KAAM,IAAK,CACjC,CAACsC,EAAAA,IAAaT,EAAAA,EAAAA,IAAOrC,OAEtBqC,EAAAA,EAAAA,IAAOlC,GAAQH,QACXgC,EAAAA,EAAAA,OAAcC,EAAAA,EAAAA,IAAoB,OAAQ3C,GAAYyD,EAAAA,EAAAA,KAAiBV,EAAAA,EAAAA,IAAOlC,GAAQH,OAAQ,KAC/FgD,EAAAA,EAAAA,IAAoB,IAAI,KAE9BnB,EAAO,KAAOA,EAAO,IAAKK,EAAAA,EAAAA,IAAoB,SAAU,CAAEO,KAAM,UAAY,mBAAoB,KAC/F,KACHP,EAAAA,EAAAA,IAAoB,IAAK1C,GAAYuD,EAAAA,EAAAA,IAAiBpC,EAAUI,OAAQ,IACxEkC,EAAAA,EAAAA,IAAanB,EAAwB,CAAEoB,GAAI,KAAO,CAChDC,SAASC,EAAAA,EAAAA,KAAS,IAAMvB,EAAO,KAAOA,EAAO,GAAK,EAChDwB,EAAAA,EAAAA,IAAiB,qBAEnBC,EAAG,KAEL,CAEJ,I,UEjFA,MAAMC,GAA2B,OAAgB,EAAQ,CAAC,CAAC,YAAY,qBAEvE,O","sources":["webpack://frontend/./src/components/ForgotPassword.vue?b4fc","webpack://frontend/./src/components/ForgotPassword.vue","webpack://frontend/./src/components/ForgotPassword.vue?4972"],"sourcesContent":["import { defineComponent as _defineComponent } from 'vue'\nimport { createElementVNode as _createElementVNode, unref as _unref, isRef as _isRef, vModelText as _vModelText, mergeProps as _mergeProps, withDirectives as _withDirectives, toDisplayString as _toDisplayString, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, withModifiers as _withModifiers, createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode } from \"vue\"\n\nconst _hoisted_1 = { class: \"forgot-password-container\" }\nconst _hoisted_2 = { class: \"form-group\" }\nconst _hoisted_3 = { key: 0 }\nconst _hoisted_4 = { style: {\"color\":\"red\",\"font-size\":\"16px\"} }\n\nimport { useForm } from 'vee-validate';\n  import { ref } from 'vue';\n  import { useRouter } from 'vue-router';\n  import * as yup from 'yup';\n  \n  \nexport default /*@__PURE__*/_defineComponent({\n  __name: 'ForgotPassword',\n  setup(__props) {\n\n  const schema = yup.object({\n    email: yup.string().email('Must be a valid email').required('Email is required'),\n  });\n  \n  const { handleSubmit, errors, defineField } = useForm({\n    validationSchema: schema,\n    initialValues: {\n      email: '',\n    }\n  });\n  \n  const [email, emailAttrs] = defineField('email');\n  \n  const router = useRouter();\n  const mainerror = ref('');\n  \n  const onSubmit = handleSubmit(async (values) => {\n    mainerror.value = \"Wait....\"\n      let response = await fetch(\"http://localhost:3000/auth/forgot-password\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(values),\n      });\n  \n      let data = await response.json();\n  \n      if (data.statusCode === 200) {\n          mainerror.value = 'A reset link has been sent to your email.';\n          router.push('/');\n      } else {\n          mainerror.value = 'Email is not exist in our database';\n      }\n  });\n  \nreturn (_ctx: any,_cache: any) => {\n  const _component_router_link = _resolveComponent(\"router-link\")!\n\n  return (_openBlock(), _createElementBlock(\"div\", _hoisted_1, [\n    _cache[5] || (_cache[5] = _createElementVNode(\"h1\", null, \"Forgot Password\", -1)),\n    _createElementVNode(\"form\", {\n      onSubmit: _cache[1] || (_cache[1] = _withModifiers(\n//@ts-ignore\n(...args) => (_unref(onSubmit) && _unref(onSubmit)(...args)), [\"prevent\"]))\n    }, [\n      _createElementVNode(\"div\", _hoisted_2, [\n        _cache[2] || (_cache[2] = _createElementVNode(\"label\", { for: \"email\" }, \"Email:\", -1)),\n        _withDirectives(_createElementVNode(\"input\", _mergeProps({\n          type: \"email\",\n          id: \"email\",\n          \"onUpdate:modelValue\": _cache[0] || (_cache[0] = ($event: any) => (_isRef(email) ? (email).value = $event : null)),\n          placeholder: \"Enter your email\"\n        }, _unref(emailAttrs)), null, 16), [\n          [_vModelText, _unref(email)]\n        ]),\n        (_unref(errors).email)\n          ? (_openBlock(), _createElementBlock(\"span\", _hoisted_3, _toDisplayString(_unref(errors).email), 1))\n          : _createCommentVNode(\"\", true)\n      ]),\n      _cache[3] || (_cache[3] = _createElementVNode(\"button\", { type: \"submit\" }, \"Send Reset Link\", -1))\n    ], 32),\n    _createElementVNode(\"p\", _hoisted_4, _toDisplayString(mainerror.value), 1),\n    _createVNode(_component_router_link, { to: \"/\" }, {\n      default: _withCtx(() => _cache[4] || (_cache[4] = [\n        _createTextVNode(\"Back to Login\")\n      ])),\n      _: 1\n    })\n  ]))\n}\n}\n\n})","<template>\n    <div class=\"forgot-password-container\">\n      <h1>Forgot Password</h1>\n      <form @submit.prevent=\"onSubmit\">\n        <div class=\"form-group\">\n          <label for=\"email\">Email:</label>\n          <input\n            type=\"email\"\n            id=\"email\"\n            v-model=\"email\"\n            placeholder=\"Enter your email\"\n            v-bind=\"emailAttrs\"\n          />\n          <span v-if=\"errors.email\">{{ errors.email }}</span>\n        </div>\n  \n        <button type=\"submit\">Send Reset Link</button>\n      </form>\n      <p style=\"color: red; font-size: 16px;\">{{ mainerror }}</p>\n      <router-link to=\"/\">Back to Login</router-link>\n    </div>\n  </template>\n  \n  <script setup lang=\"ts\">\n  import { useForm } from 'vee-validate';\n  import { ref } from 'vue';\n  import { useRouter } from 'vue-router';\n  import * as yup from 'yup';\n  \n  const schema = yup.object({\n    email: yup.string().email('Must be a valid email').required('Email is required'),\n  });\n  \n  const { handleSubmit, errors, defineField } = useForm({\n    validationSchema: schema,\n    initialValues: {\n      email: '',\n    }\n  });\n  \n  const [email, emailAttrs] = defineField('email');\n  \n  const router = useRouter();\n  const mainerror = ref('');\n  \n  const onSubmit = handleSubmit(async (values) => {\n    mainerror.value = \"Wait....\"\n      let response = await fetch(\"http://localhost:3000/auth/forgot-password\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(values),\n      });\n  \n      let data = await response.json();\n  \n      if (data.statusCode === 200) {\n          mainerror.value = 'A reset link has been sent to your email.';\n          router.push('/');\n      } else {\n          mainerror.value = 'Email is not exist in our database';\n      }\n  });\n  </script>\n  \n  <style scoped>\n  .forgot-password-container {\n    max-width: 400px;\n    margin: 0 auto;\n    padding: 20px;\n    border: 1px solid #ccc;\n    border-radius: 8px;\n    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\n    margin-top: 100px;\n  }\n  \n  h1 {\n    text-align: center;\n    margin-bottom: 20px;\n  }\n  \n  .form-group {\n    margin-bottom: 15px;\n  }\n  \n  label {\n    display: block;\n    margin-bottom: 5px;\n  }\n  \n  input {\n    width: 93%;\n    padding: 10px;\n    border: 1px solid #ccc;\n    border-radius: 4px;\n  }\n  \n  button {\n    width: 100%;\n    padding: 10px;\n    background-color: #007bff;\n    color: white;\n    border: none;\n    border-radius: 4px;\n    cursor: pointer;\n  }\n  \n  button:hover {\n    background-color: #0056b3;\n  }\n  \n  span {\n    color: red;\n    font-size: 12px;\n  }\n  </style>\n  ","import script from \"./ForgotPassword.vue?vue&type=script&setup=true&lang=ts\"\nexport * from \"./ForgotPassword.vue?vue&type=script&setup=true&lang=ts\"\n\nimport \"./ForgotPassword.vue?vue&type=style&index=0&id=d46b3d76&scoped=true&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-d46b3d76\"]])\n\nexport default __exports__"],"names":["_hoisted_1","class","_hoisted_2","_hoisted_3","key","_hoisted_4","style","_defineComponent","__name","setup","__props","schema","yup","email","required","handleSubmit","errors","defineField","useForm","validationSchema","initialValues","emailAttrs","router","useRouter","mainerror","ref","onSubmit","async","value","response","fetch","method","headers","body","JSON","stringify","values","data","json","statusCode","push","_ctx","_cache","_component_router_link","_resolveComponent","_openBlock","_createElementBlock","_createElementVNode","_withModifiers","args","_unref","for","_withDirectives","_mergeProps","type","id","$event","_isRef","placeholder","_vModelText","_toDisplayString","_createCommentVNode","_createVNode","to","default","_withCtx","_createTextVNode","_","__exports__"],"sourceRoot":""}